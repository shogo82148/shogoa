package design

// APIDefinition defines the global properties of the API.
type APIDefinition struct {
	// Name of API
	Name string
	// Title of API
	Title string
	// Description of API
	Description string
	// Version is the version of the API described by this design.
	Version string
	// Host is the default API hostname
	Host string
	// Schemes is the supported API URL schemes
	Schemes []string
	// BasePath is the common base path to all API endpoints
	BasePath string
	// TODO: Params define the common path parameters to all API endpoints
	// Params *AttributeDefinition
	// Consumes lists the mime types supported by the API controllers
	// Consumes []*EncodingDefinition
	// Produces lists the mime types generated by the API controllers
	// Produces []*EncodingDefinition
	// Origins defines the CORS policies that apply to this API.
	// Origins map[string]*CORSDefinition
	// TermsOfService describes or links to the API terms of service
	// TermsOfService string
	// Contact provides the API users with contact information
	// Contact *ContactDefinition
	// License describes the API license
	// License *LicenseDefinition
	// Docs points to the API external documentation
	// Docs *DocsDefinition
	// Resources is the set of exposed resources indexed by name
	// Resources map[string]*ResourceDefinition
	// Types indexes the user defined types by name
	// Types map[string]*UserTypeDefinition
	// MediaTypes indexes the API media types by canonical identifier
	// MediaTypes map[string]*MediaTypeDefinition
	// Traits available to all API resources and actions indexed by name
	// Traits map[string]*dslengine.TraitDefinition
	// Responses available to all API actions indexed by name
	// Responses map[string]*ResponseDefinition
	// Response template factories available to all API actions indexed by name
	// ResponseTemplates map[string]*ResponseTemplateDefinition
	// Built-in responses
	// DefaultResponses map[string]*ResponseDefinition
	// Built-in response templates
	// DefaultResponseTemplates map[string]*ResponseTemplateDefinition
	// DSLFunc contains the DSL used to create this definition if any
	DSLFunc func()
	// Metadata is a list of key/value pairs
	// Metadata dslengine.MetadataDefinition
	// SecuritySchemes lists the available security schemes available
	// to the API.
	// SecuritySchemes []*SecuritySchemeDefinition
	// Security defines security requirements for all the
	// resources and actions, unless overridden by Resource or
	// Action-level Security() calls.
	// Security *SecurityDefinition

	// NoExamples indicates whether to bypass automatic example generation.
	NoExamples bool

	// rand is the random generator used to generate examples.
	//rand *RandomGenerator
}

// NewAPIDefinition returns a new design with built-in response templates.
func NewAPIDefinition() *APIDefinition {
	return &APIDefinition{
		// TODO: implement me
	}
}
